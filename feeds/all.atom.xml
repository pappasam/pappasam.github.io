<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Software Journeyman</title><link href="https://softwarejourneyman.com/" rel="alternate"></link><link href="https://softwarejourneyman.com/feeds/all.atom.xml" rel="self"></link><id>https://softwarejourneyman.com/</id><updated>2018-06-02T00:00:00-05:00</updated><entry><title>Python Function Pipelines</title><link href="https://softwarejourneyman.com/python-function-pipelines.html" rel="alternate"></link><published>2018-06-02T00:00:00-05:00</published><updated>2018-06-02T00:00:00-05:00</updated><author><name>Samuel Roeca</name></author><id>tag:softwarejourneyman.com,2018-06-02:/python-function-pipelines.html</id><summary type="html">&lt;p&gt;If your Python code represents a function pipeline, it should look like a
function pipeline. This post presents a simple, strongly-typed function
pipeline for your personal projects to make beautiful, explicit, Unix-like
pipelines in Python.  Requires Python 3.6 or greater.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If your Python code represents a function pipeline, it should look like a
function pipeline. This post presents a simple, strongly-typed function
pipeline for your personal projects to make beautiful, explicit, Unix-like
pipelines in Python.  Requires Python 3.6 or greater.&lt;/p&gt;

&lt;p&gt;I was reading through the pytorch reinforcement learning &lt;a class="reference external" href="https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html"&gt;documentation&lt;/a&gt; today
and came across the following irksome pattern:&lt;/p&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bn1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bn2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bn3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;..&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The manipulation and reassignment of a variable &lt;em&gt;x&lt;/em&gt; to itself as it is passed
through a neural network's gateways makes neural networks that much harder to
follow. IMHO, explicit variable &lt;strong&gt;reassignment&lt;/strong&gt; is almost always bad because
it makes it hard for my limited human brain to track a variable name's
associated data during program execution. If a program tells me that &lt;em&gt;x&lt;/em&gt; is an
integer on line 10 and then &lt;strong&gt;reassigns&lt;/strong&gt; it to a string on line 20, I will
want to delete said program from my computer, take a cold shower, and exact
revenge on the program's author. With that established, let's just avoid
reassignment altogether.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;In the above example, variable reassignment is convenient. It prevents the
programmer from needing to come up with new names for each state in the
connected pipeline. How can we find an elegant way of avoiding explicit
variable reassignment in the pipeline use-case while still producing readable,
performant code? The answer: take inspiration from Unix pipes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unix-pipes"&gt;
&lt;h2&gt;Unix pipes&lt;/h2&gt;
&lt;p&gt;In the Unix shell, virtually everything we work with has the same type: a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Everything_is_a_file"&gt;file&lt;/a&gt;. &amp;quot;Everything is a File&amp;quot; makes it easy to chain functions together because
all commands take files as inputs and return files as outputs.  One common way
to chain system calls in Unix is called the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Anonymous_pipe"&gt;anonymous pipe&lt;/a&gt;, which enables
programmers to chain command line programs together to manipulate a text
stream. See the following example:&lt;/p&gt;
&lt;pre class="code bash highlight literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;
&lt;span class="c1"&gt;# Count the number of words
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello hello hello world world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -w

&lt;span class="c1"&gt;# Count the number of words that are not &amp;quot;hello&amp;quot;
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello hello hello world world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/hello//g'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -w

&lt;span class="c1"&gt;# Count the number of words that are not &amp;quot;world&amp;quot;
&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello hello hello world world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/world//g'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -w

&lt;span class="c1"&gt;# Should print the following to console:
# 5
# 2
# 3&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that data flows &lt;strong&gt;through&lt;/strong&gt; the pipeline and no variable reassignment is
used. The Unix pipeline is beautiful in this regard; I'd like to build
something similar in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Let's say we have the following three functions:&lt;/p&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Our &lt;strong&gt;example problem&lt;/strong&gt;: take an initial integer 0 and add 5, then 6, then 7
to it using our three functions so that our final result is 18.&lt;/p&gt;
&lt;div class="section" id="solution-1-name-each-step-in-the-pipeline"&gt;
&lt;h3&gt;Solution 1: name each step in the pipeline&lt;/h3&gt;
&lt;p&gt;We can do slightly better than the pytorch example and create a unique variable
name for each step in the process.&lt;/p&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;x_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x_6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'x={x}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Besides being pretty ugly / hard to read, this creates some useless names in
our module's scope. Do we really need to give each step its own name? We don't
use the steps anywhere else and this makes the pipeline pretty hard to edit.
This solution almost makes we wish we could go back to reassignment.
Fortunately, the entire pipeline can be expressed with one name thanks to the
&amp;quot;reduce&amp;quot; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-2-use-the-reduce-function"&gt;
&lt;h3&gt;Solution 2: use the &amp;quot;reduce&amp;quot; function&lt;/h3&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'y={y}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This example uses the standard library &amp;quot;reduce&amp;quot; function. Originally, &amp;quot;reduce&amp;quot;
was intended to take a list of values and collapse them into one value. This
use-case is described well in the &lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.reduce"&gt;Python documentation&lt;/a&gt; and in this
&lt;a class="reference external" href="https://www.youtube.com/watch?v=ZrZ6vJGiE8I"&gt;YouTube&lt;/a&gt; video. Here, we use it a bit differently. Instead of taking a list
of values and applying a &amp;quot;collapsing&amp;quot; function to them, we take a list of
functions and pass a value through them. This has obvious advantages over
solution 1: we can easily swap new functions in and out of the pipeline to suit
our needs without needing to adjust any other code / rename pipeline steps
(because we haven't named the steps at all!).&lt;/p&gt;
&lt;p&gt;This solution frees us from naming each step in our pipeline but it does have
some disadvantages: &amp;quot;reduce&amp;quot; is kind of hard to read and this use-case isn't
quite standard. Whenever we find ourselves using a standard library function in
a confusing way, that's a signal that we should probably define our own
function to make this clearer to ourselves and to those who read our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-3-custom-pipeline-function"&gt;
&lt;h3&gt;Solution 3: custom &amp;quot;pipeline&amp;quot; function&lt;/h3&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;'''A generic Unix-like pipeline

    :param value: the value you want to pass through a pipeline
    :param function_pipeline: an ordered list of functions that
        comprise your pipeline
    '''&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'z={z}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This solution is elegant and explicit. It is generic and works with mypy. As
long as our function pipeline contains only functions that take our value's
type and return our value's type (similar to Unix command line utilities, where
everything is a file), this pipeline will successfully pass our value in a
type-safe way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="full-script"&gt;
&lt;h2&gt;Full script&lt;/h2&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="sd"&gt;'''Simple function example'''&lt;/span&gt;

&lt;span class="c1"&gt;# functions: begin&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="c1"&gt;# functions: end&lt;/span&gt;

&lt;span class="c1"&gt;# reassignment: begin&lt;/span&gt;
&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;x_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x_6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'x={x}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# reassignment: end&lt;/span&gt;

&lt;span class="c1"&gt;# simple reduce: begin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'y={y}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# simple reduce: end&lt;/span&gt;

&lt;span class="c1"&gt;# pipeline: begin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;'''A generic Unix-like pipeline

    :param value: the value you want to pass through a pipeline
    :param function_pipeline: an ordered list of functions that
        comprise your pipeline
    '''&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;function_pipeline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;add_5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;add_7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'z={z}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# pipeline: end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If your system resembles a pipeline, don't reassign your piped variable to
itself. There is a better way and it's pretty much built into Python.  You'll
just need to care enough to use it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="Unix"></category><category term="pipeline"></category><category term="functional programming"></category></entry><entry><title>Smaller Python Docker Containers with Multi-Stage Builds and Python Wheels</title><link href="https://softwarejourneyman.com/docker-python-install-wheels.html" rel="alternate"></link><published>2018-04-21T00:00:00-05:00</published><updated>2018-04-21T00:00:00-05:00</updated><author><name>Samuel Roeca</name></author><id>tag:softwarejourneyman.com,2018-04-21:/docker-python-install-wheels.html</id><summary type="html">&lt;p&gt;If your Docker Python build requires system dependencies that are NOT required
at runtime, structure your build as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use a &lt;a class="reference external" href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stage 1 installs system dependencies and uses them to build local &lt;a class="reference external" href="https://pythonwheels.com/"&gt;wheels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stage 2 begins from the same base as Stage 1, copies wheels from
Stage 1, and installs the wheels&lt;/li&gt;
&lt;li&gt;The rest of your build will be based on Stage 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you follow these steps, you'll end up with the smallest-possible Python
Docker container with all your Python dependencies intact.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If your Docker Python build requires system dependencies that are NOT required
at runtime, structure your build as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use a &lt;a class="reference external" href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stage 1 installs system dependencies and uses them to build local &lt;a class="reference external" href="https://pythonwheels.com/"&gt;wheels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stage 2 begins from the same base as Stage 1, copies wheels from
Stage 1, and installs the wheels&lt;/li&gt;
&lt;li&gt;The rest of your build will be based on Stage 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you follow these steps, you'll end up with the smallest-possible Python
Docker container with all your Python dependencies intact.&lt;/p&gt;

&lt;p&gt;Note: this post references Docker 18.03, Python 3.6, and pip 10. I assume that
you are running &lt;a class="reference external" href="https://github.com/python/cpython"&gt;CPython&lt;/a&gt; (Python's reference implementation).&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;We want to do a Python system build using Docker. Python system builds often
require installing third-party code. This third-party code may contain code or
resources that must be compiled during their installation. For simplicity's
sake, assume we are talking about source code in the C programming language.
Since a Docker container will be our &amp;quot;target machine&amp;quot;, we'll need a C compiler
in our Docker container. Unfortunately, C compilers are large programs. Since
we plan to scale our number of containers up and down based on the demand for
its provided service, the image should ideally be as small as possible.&lt;/p&gt;
&lt;p&gt;Basically, we want to build C code with a C compiler and then throw away the C
compiler to save space in our deployment image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;The following examples should clarify the problem and its resolution. Note: I'm
assuming that you're using a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/POSIX"&gt;POSIX&lt;/a&gt;-inspired system.&lt;/p&gt;
&lt;div class="section" id="setup"&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;Copy the following Makefile into your current working directory.&lt;/p&gt;
&lt;pre class="code make highlight literal-block"&gt;
&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;-&lt;span class="n"&gt;break&lt;/span&gt;
&lt;span class="nf"&gt;build-break&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker build -t blog-python:break -f ./Dockerfile.break .

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;-&lt;span class="n"&gt;big&lt;/span&gt;
&lt;span class="nf"&gt;build-big&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker build -t blog-python:big -f ./Dockerfile.big .
        docker images

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;-&lt;span class="n"&gt;uninstall&lt;/span&gt;-&lt;span class="n"&gt;big&lt;/span&gt;
&lt;span class="nf"&gt;build-uninstall-big&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker build -t blog-python:big-uninstall -f ./Dockerfile.uninstall .
        docker images

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;-&lt;span class="n"&gt;small&lt;/span&gt;
&lt;span class="nf"&gt;build-small&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker build -t blog-python:small -f ./Dockerfile.small .
        docker images
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-broken-build-requiring-a-c-compiler"&gt;
&lt;h3&gt;Example 1: broken build requiring a C compiler&lt;/h3&gt;
&lt;p&gt;We have a simple, &lt;a class="reference external" href="https://docs.docker.com/engine/reference/builder/#entrypoint"&gt;entrypoint&lt;/a&gt;-less Docker container in which we must install
&lt;a class="reference external" href="https://uwsgi-docs.readthedocs.io/en/latest/"&gt;uWSGI&lt;/a&gt;. In the uWSGI &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html"&gt;quickstart&lt;/a&gt; guide, its developers clarify that it &amp;quot;is a
(big) C application, so you need a C compiler (like gcc or clang) and the
Python development headers&amp;quot;.&lt;/p&gt;
&lt;p&gt;Copy the following code into a file called &amp;quot;Dockerfile.break&amp;quot;:&lt;/p&gt;
&lt;pre class="code docker highlight literal-block"&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine as breakimage&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; pip install uwsgi
&lt;/pre&gt;
&lt;p&gt;Now run the following shell command in the same directory as your
Dockerfile.break.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make build-break
&lt;/pre&gt;
&lt;p&gt;At the end of our failed build, we see this Traceback (in addition to other
helpful messages):&lt;/p&gt;
&lt;pre class="code py3tb literal-block"&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):
&lt;/span&gt;  File &lt;span class="nb"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/tmp/pip-install-tkd8plx9/uwsgi/setup.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;137&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class="s1"&gt;'Programming Language :: Python :: 3.6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/usr/local/lib/python3.6/site-packages/setuptools/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;129&lt;/span&gt;, in &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;distutils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/usr/local/lib/python3.6/distutils/core.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;148&lt;/span&gt;, in &lt;span class="n"&gt;setup&lt;/span&gt;
    &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_commands&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/usr/local/lib/python3.6/distutils/dist.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;955&lt;/span&gt;, in &lt;span class="n"&gt;run_commands&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/usr/local/lib/python3.6/distutils/dist.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;974&lt;/span&gt;, in &lt;span class="n"&gt;run_command&lt;/span&gt;
    &lt;span class="n"&gt;cmd_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/tmp/pip-install-tkd8plx9/uwsgi/setup.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;77&lt;/span&gt;, in &lt;span class="n"&gt;run&lt;/span&gt;
    &lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uConf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_profile&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/tmp/pip-install-tkd8plx9/uwsgi/uwsgiconfig.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;747&lt;/span&gt;, in &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;you need a C compiler to build uWSGI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gr"&gt;Exception&lt;/span&gt;: &lt;span class="n"&gt;you need a C compiler to build uWSGI&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Consistent with the uWSGI documentation, our system has said that we &amp;quot;need a C
compiler to build uWSGI&amp;quot;. We'll do that in example 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-large-build-with-c-compiler-installed"&gt;
&lt;h3&gt;Example 2: large build with C compiler installed&lt;/h3&gt;
&lt;p&gt;In this example, we'll install our system dependencies so uWSGI can actually be
built.&lt;/p&gt;
&lt;p&gt;Copy the following code into a file called &amp;quot;Dockerfile.big&amp;quot;:&lt;/p&gt;
&lt;pre class="code docker highlight literal-block"&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine as bigimage&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apk add --no-cache linux-headers g++

&lt;span class="k"&gt;RUN&lt;/span&gt; pip install uwsgi
&lt;/pre&gt;
&lt;p&gt;Now run the following shell command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make build-big
&lt;/pre&gt;
&lt;p&gt;In the &amp;quot;build-big&amp;quot; make target, I've included a command to list all Docker
images on your system. Because of this command, you should see something close
to the following in your terminal:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED                  SIZE
blog-python         big                 8a68d0dad407        Less than a second ago   251MB
python              3.6-alpine          8eb1c554687d        16 hours ago             90.4MB
&lt;/pre&gt;
&lt;div class="section" id="the-good"&gt;
&lt;h4&gt;The good&lt;/h4&gt;
&lt;p&gt;The image built successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bad"&gt;
&lt;h4&gt;The bad&lt;/h4&gt;
&lt;p&gt;The image is unnecessarily large.&lt;/p&gt;
&lt;p&gt;We're planning on scaling our web-service to handle a decent amount of traffic.
Scaling will involve deploying many images on many servers. Larger images take
longer to deploy and (obviously) take up more space than smaller images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ugly"&gt;
&lt;h4&gt;The ugly&lt;/h4&gt;
&lt;p&gt;We are including an unnecessary dependency.&lt;/p&gt;
&lt;p&gt;We don't need a C compiler in the image, so the C compiler is an unnecessary
dependency.  Including an unnecessary dependency in our runtime image is a
horrible design, similar to including an unnecessary Python dependency in our
requirements.txt or setup.py. As great software developers, we HATE bad system
design, so let's find a way to resolve the &amp;quot;bad&amp;quot; and the &amp;quot;ugly&amp;quot; while
preserving the &amp;quot;good&amp;quot;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example-3-failed-attempt-at-simply-uninstalling-c-compiler"&gt;
&lt;h3&gt;Example 3: failed attempt at simply &amp;quot;uninstalling&amp;quot; C compiler&lt;/h3&gt;
&lt;p&gt;Unfortunately, if we want to reduce our image size, we cannot simply
&amp;quot;uninstall&amp;quot; the C compiler. For reasons that I do not fully comprehend at this
time, Docker caches anything you install in an image, so uninstalling a
dependency does NOT reduce the image size.&lt;/p&gt;
&lt;p&gt;Copy the following code into a file called &amp;quot;Dockerfile.uninstall&amp;quot;:&lt;/p&gt;
&lt;pre class="code docker highlight literal-block"&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine as bigimage-uninstalled&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apk add --no-cache linux-headers g++

&lt;span class="k"&gt;RUN&lt;/span&gt; pip install uwsgi

&lt;span class="k"&gt;RUN&lt;/span&gt; apk del linux-headers g++
&lt;/pre&gt;
&lt;p&gt;Now run the following shell command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make build-uninstall-big
&lt;/pre&gt;
&lt;p&gt;You should see something close to the following in your terminal:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED                  SIZE
blog-python         big-uninstall       10a0eb5d42aa        Less than a second ago   251MB
blog-python         big                 8a68d0dad407        11 minutes ago           251MB
python              3.6-alpine          8eb1c554687d        16 hours ago             90.4MB
&lt;/pre&gt;
&lt;p&gt;Our efforts at removing our C compiler proved futile. At this point, lesser
developers would give up and assume we've reached the end of the road. But you,
dear reader, are reading my blog, and I know you're better than that! Let's dig
deeper and find an elegant way shrink our Docker image!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-4-small-final-build-without-c-compiler"&gt;
&lt;h3&gt;Example 4: small final build without C compiler&lt;/h3&gt;
&lt;p&gt;This final example results in a small image with uWSGI installed and without a
C compiler. It relies heavily on multi-stage builds and on pip wheels.&lt;/p&gt;
&lt;p&gt;Copy the following code into a file called &amp;quot;Dockerfile.small&amp;quot;:&lt;/p&gt;
&lt;pre class="code docker highlight literal-block"&gt;
&lt;span class="c"&gt;###########################################&lt;/span&gt;
&lt;span class="c"&gt;# Throwaway image with C compiler installed&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine as bigimage&lt;/span&gt;

&lt;span class="c"&gt;# install the C compiler&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apk add --no-cache linux-headers g++

&lt;span class="c"&gt;# instead of installing, create a wheel&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip wheel --wheel-dir&lt;span class="o"&gt;=&lt;/span&gt;/root/wheels uwsgi

&lt;span class="c"&gt;###########################################&lt;/span&gt;
&lt;span class="c"&gt;# Image WITHOUT C compiler but WITH uWSGI&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.6-alpine as smallimage&lt;/span&gt;

COPY --from&lt;span class="o"&gt;=&lt;/span&gt;bigimage /root/wheels /root/wheels

&lt;span class="c"&gt;# Ignore the Python package index&lt;/span&gt;
&lt;span class="c"&gt;# and look for archives in&lt;/span&gt;
&lt;span class="c"&gt;# /root/wheels directory&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install &lt;span class="se"&gt;\
&lt;/span&gt;      --no-index &lt;span class="se"&gt;\
&lt;/span&gt;      --find-links&lt;span class="o"&gt;=&lt;/span&gt;/root/wheels &lt;span class="se"&gt;\
&lt;/span&gt;      uwsgi
&lt;/pre&gt;
&lt;p&gt;Now run the following shell command:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
make build-small
&lt;/pre&gt;
&lt;p&gt;You should see something close to the following in your terminal:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
blog-python         small               b952f6280b00        1 second ago        97.4MB
&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              91c7bb911f32        3 minutes ago       249MB
blog-python         big-uninstall       10a0eb5d42aa        23 minutes ago      251MB
blog-python         big                 8a68d0dad407        34 minutes ago      251MB
python              3.6-alpine          8eb1c554687d        16 hours ago        90.4MB
&lt;/pre&gt;
&lt;p&gt;Notice that the image tagged &amp;quot;small&amp;quot; is ~61% smaller than its &amp;quot;big&amp;quot;
counterparts. It has 7 additional MB from its base alpine container. These
megabytes represent only the uWSGI library itself. We'll need to make
modifications to uWSGI itself to get any smaller. I leave uWSGI modifications
as an exercise for the reader.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="explanation"&gt;
&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;p&gt;Two key points are responsible for our Docker build's success:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Reliance on copying between image stages in Docker multi-stage
builds. This gets around caching problems with a single image&lt;/li&gt;
&lt;li&gt;Understanding the difference between &amp;quot;pip install&amp;quot; and &amp;quot;pip wheel&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="copying-betwen-docker-build-stages-in-multi-stage-build"&gt;
&lt;h3&gt;Copying betwen Docker build stages in multi-stage build&lt;/h3&gt;
&lt;p&gt;Unless we explicitly specify a &lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/build/#specifying-target-build-stage---target"&gt;--target&lt;/a&gt;, Docker multi-stage builds will tag
their last stage. Downstream build stages can reference upstream build stages
and copy resources from them, similarly to how resources can be copied from any
local or remote file system into a traditional Docker container. Therefore, we
&amp;quot;compile&amp;quot; our Python code in one build stage and copy this compiled code in
another build stage. Since the code no longer needs to be compiled, we don't
need to a C compiler or Linux headers. As the coup de grâce, our build's final
stage is not based on any image with a C compiler installed, so this approach
completely avoids Docker's caching complexities.&lt;/p&gt;
&lt;p&gt;Thanks to Docker's multi-stage builds, we are able to compile our Python
package and avoid deploying the build's system dependencies in our final image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="difference-between-pip-install-and-pip-wheel"&gt;
&lt;h3&gt;Difference between &amp;quot;pip install&amp;quot; and &amp;quot;pip wheel&amp;quot;&lt;/h3&gt;
&lt;p&gt;Docker multi-stage builds are cool and all, but I've seen many articles about
them. Python's packaging tool, &lt;a class="reference external" href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt;, hasn't gotten as much careful attention
from the blogging community. Hopefully this section can clear up one common
point of confusion: &lt;a class="reference external" href="https://pip.pypa.io/en/stable/reference/pip_install/"&gt;pip install&lt;/a&gt; vs &lt;a class="reference external" href="https://pip.pypa.io/en/stable/reference/pip_wheel/"&gt;pip wheel&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;pip install&lt;/h4&gt;
&lt;p&gt;This is the command most people are familiar with. At a high level, it takes a
Python package, runs its setup.py, downloads and installs its dependencies, and
potentially does a lot more. Run &amp;quot;pip install&amp;quot; when you want to expand a
package's contents and use it as its author intended.&lt;/p&gt;
&lt;p&gt;A good mental model: &amp;quot;pip install&amp;quot; takes a consolidated bundle of code / build
instructions and places the package's content and dependencies wherever they
need to go on an operating system. Once &amp;quot;pip install&amp;quot; runs on our machine, file
placement throughout our file system can be pretty &lt;a class="reference external" href="http://stayhawaiian.blogspot.com/2010/05/hamajang.html"&gt;hamajang&lt;/a&gt;, depending on a
package's setup.py instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;pip wheel&lt;/h4&gt;
&lt;p&gt;This tool is mostly used by library developers wanting to distribute their
packages in a user-friendly way. For example, &lt;a class="reference external" href="http://scikit-learn.org"&gt;scikitlearn&lt;/a&gt;, a popular Python
library for machine learning, requires &lt;a class="reference external" href="http://scikit-learn.org/stable/developers/advanced_installation.html"&gt;a lot of system dependencies&lt;/a&gt; to
build. Many Python users, especially data scientists, are either unwilling or
unable to install these dependencies on their host machines. This
user-characteristic led to unfortunate platforms like &lt;a class="reference external" href="https://www.anaconda.com/what-is-anaconda/"&gt;Anaconda&lt;/a&gt; (author
opinion). On a more mature note, for those of us with the appropriate
dependencies installed, the installation process would often take a very long
time; C, FORTRAN, and possibly other languages each needed to be compiled, and
installing code written in these languages often leads to a long coffee break.&lt;/p&gt;
&lt;p&gt;Wheels enable Python developers to compile a package, and its dependencies, in
a distributable form targeting common operating system architectures. Today,
most scikitlearn users install it &lt;a class="reference external" href="http://scikit-learn.org/stable/install.html"&gt;using its wheel&lt;/a&gt;, which takes a fraction of
the time of the regular build process.&lt;/p&gt;
&lt;p&gt;A good mental model: &amp;quot;pip wheel&amp;quot; takes a Python package, makes it ready to be
installed on any target machine WITHOUT its build dependencies, and puts it in
ONE easily-distributed archive file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-we-care-about-this"&gt;
&lt;h4&gt;Why we care about this?&lt;/h4&gt;
&lt;p&gt;Not all Python packages are distributed as wheels. There are some packages,
based mostly on C, that are hard to compile once and use in many places. uWSGI
appears to be one of those packages. To build our final image, we construct
a throw-away container to construct a wheel for uWSGI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When building a Docker container for a Python application, we can install
packages requiring build-time system dependencies AND remove these system
dependencies from our final Docker image through a combination of Docker
multi-stage builds, pip wheel, and pip install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-thanks"&gt;
&lt;h2&gt;Special thanks&lt;/h2&gt;
&lt;p&gt;This post took inspiration from &lt;a class="reference external" href="https://lekum.org/post/multistage-dockerfile/"&gt;this post&lt;/a&gt; by Alejandro Guirao. I am indebted
to Alejandro for publishing his creative use of docker multi-stage builds in
the context of Python systems.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Docker"></category><category term="Python"></category><category term="pip"></category></entry><entry><title>Vim Line Numbers</title><link href="https://softwarejourneyman.com/vim-line-numbers.html" rel="alternate"></link><published>2018-04-07T00:00:00-05:00</published><updated>2018-04-07T00:00:00-05:00</updated><author><name>Samuel Roeca</name></author><id>tag:softwarejourneyman.com,2018-04-07:/vim-line-numbers.html</id><summary type="html">&lt;p&gt;If you want your Vim line numbers to be relative and/or not relative at the
correct times, I recommend installing the &lt;a class="reference external" href="https://github.com/myusuf3/numbers.vim"&gt;myusuf3/numbers.vim&lt;/a&gt; plugin.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If you want your Vim line numbers to be relative and/or not relative at the
correct times, I recommend installing the &lt;a class="reference external" href="https://github.com/myusuf3/numbers.vim"&gt;myusuf3/numbers.vim&lt;/a&gt; plugin.&lt;/p&gt;

&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When editing text in a Vim window, I use relative numbers to help me use
motions across text relative to my cursor. However, when I have multiple
windows open, relative numbers look pretty weird in windows that I am not
currently editing.  It would be nice for Vim to intelligently alternate between
relativenumber and norelativenumber based on my Vim cursor location. Base Vim
does not have this capability, so we have three options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Accept a suboptimal workflow&lt;/li&gt;
&lt;li&gt;Wrap our own solution in our .vimrc&lt;/li&gt;
&lt;li&gt;Find a Plugin&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I lived with option 1 for a while, but eventually grew too annoyed.  I then
tried researching plugins, but thought I understood the problem well-enough to
write my own solution. So I went straight to option 2 and tried wrapping my own
solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-my-own-solution"&gt;
&lt;h2&gt;Wrapping my own solution&lt;/h2&gt;
&lt;p&gt;The following code represents my original solution:&lt;/p&gt;
&lt;pre class="code vim highlight literal-block"&gt;
&lt;span class="ln"&gt; 1 &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; ToggleRelativeNumber&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt; 2 &lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;rnu&lt;/span&gt;
&lt;span class="ln"&gt; 3 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
&lt;span class="ln"&gt; 4 &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt; 5 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt; 6 &lt;/span&gt;  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt; 7 &lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="ln"&gt; 8 &lt;/span&gt;
&lt;span class="ln"&gt; 9 &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RNUInsertEnter&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;10 &lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;rnu&lt;/span&gt;
&lt;span class="ln"&gt;11 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'rnu'&lt;/span&gt;
&lt;span class="ln"&gt;12 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
&lt;span class="ln"&gt;13 &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt;14 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'nornu'&lt;/span&gt;
&lt;span class="ln"&gt;15 &lt;/span&gt;  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;16 &lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="ln"&gt;17 &lt;/span&gt;
&lt;span class="ln"&gt;18 &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RNUInsertLeave&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;19 &lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'rnu'&lt;/span&gt;
&lt;span class="ln"&gt;20 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt;21 &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt;22 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
&lt;span class="ln"&gt;23 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'nornu'&lt;/span&gt;
&lt;span class="ln"&gt;24 &lt;/span&gt;  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;25 &lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="ln"&gt;26 &lt;/span&gt;
&lt;span class="ln"&gt;27 &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RNUWinEnter&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;28 &lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'w:line_number_state'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ln"&gt;29 &lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'rnu'&lt;/span&gt;
&lt;span class="ln"&gt;30 &lt;/span&gt;      &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt;31 &lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt;32 &lt;/span&gt;      &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
&lt;span class="ln"&gt;33 &lt;/span&gt;    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;34 &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt;35 &lt;/span&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt;36 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'rnu'&lt;/span&gt;
&lt;span class="ln"&gt;37 &lt;/span&gt;  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;38 &lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="ln"&gt;39 &lt;/span&gt;
&lt;span class="ln"&gt;40 &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RNUWinLeave&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;41 &lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;rnu&lt;/span&gt;
&lt;span class="ln"&gt;42 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'rnu'&lt;/span&gt;
&lt;span class="ln"&gt;43 &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="ln"&gt;44 &lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:line_number_state &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'nornu'&lt;/span&gt;
&lt;span class="ln"&gt;45 &lt;/span&gt;  &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;46 &lt;/span&gt;  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;norelativenumber&lt;/span&gt;
&lt;span class="ln"&gt;47 &lt;/span&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="ln"&gt;48 &lt;/span&gt;&lt;span class="c"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;49 &lt;/span&gt;&lt;span class="c"&gt;&amp;quot; autocmd that will set up the w:created variable&lt;/span&gt;
&lt;span class="ln"&gt;50 &lt;/span&gt;autocmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * autocmd &lt;span class="nb"&gt;WinEnter&lt;/span&gt; * &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:created&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="ln"&gt;51 &lt;/span&gt;autocmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:created&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="ln"&gt;52 &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt;53 &lt;/span&gt;augroup rnu_nu
&lt;span class="ln"&gt;54 &lt;/span&gt;  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="ln"&gt;55 &lt;/span&gt;&lt;span class="c"&gt;  &amp;quot;Initial window settings&lt;/span&gt;
&lt;span class="ln"&gt;56 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;WinEnter&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'w:created'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="ln"&gt;57 &lt;/span&gt;        \&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="ln"&gt;58 &lt;/span&gt;        \&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="ln"&gt;59 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;User&lt;/span&gt; Startified &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="ln"&gt;60 &lt;/span&gt;&lt;span class="c"&gt;  &amp;quot; Don't have relative numbers during insert mode&lt;/span&gt;
&lt;span class="ln"&gt;61 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;InsertEnter&lt;/span&gt; * :&lt;span class="k"&gt;call&lt;/span&gt; RNUInsertEnter&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;62 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;InsertLeave&lt;/span&gt; * :&lt;span class="k"&gt;call&lt;/span&gt; RNUInsertLeave&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;63 &lt;/span&gt;&lt;span class="c"&gt;  &amp;quot; Set and unset relative numbers when buffer is active&lt;/span&gt;
&lt;span class="ln"&gt;64 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;WinEnter&lt;/span&gt; * :&lt;span class="k"&gt;call&lt;/span&gt; RNUWinEnter&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;65 &lt;/span&gt;  autocmd &lt;span class="nb"&gt;WinLeave&lt;/span&gt; * :&lt;span class="k"&gt;call&lt;/span&gt; RNUWinLeave&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ln"&gt;66 &lt;/span&gt;augroup &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="the-good"&gt;
&lt;h3&gt;The good&lt;/h3&gt;
&lt;p&gt;The solution worked for most windows and tabs, most of the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bad"&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;p&gt;The code is a bit involved and it takes a little time to explain to others.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It relies on window-local variables (w:line_number_state, etc).
These exacerbate Vim's already-difficult state-management woes.&lt;/li&gt;
&lt;li&gt;Several global functions are defined&lt;/li&gt;
&lt;li&gt;There are some quirks I don't fully understand around the creation of
variables during Vim startup (hence lines 50 and 51).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Despite these mild downsides, I was pretty proud that the solution mostly
worked. That is, until I wasn't.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-back-breaking-straw"&gt;
&lt;h3&gt;The back-breaking straw&lt;/h3&gt;
&lt;p&gt;My custom solution did not work appropriately with some of my plugins. Namely,
it didn't play well with &lt;a class="reference external" href="https://github.com/majutsushi/tagbar"&gt;majutsushi/tagbar&lt;/a&gt;, which I use frequently enough
for this feature-dearth to become royally annoying. Therefore, after learning
the ins-and-outs of window-specific variables and every Vim autocmd, I went
back to the Plugin ecosystem to see if I'd missed anything...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-game-changing-plugin"&gt;
&lt;h2&gt;The Game-Changing Plugin&lt;/h2&gt;
&lt;p&gt;Turns out a wonderful developer already solved this problem for me.
Assuming you use &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;junegunn/vim-plug&lt;/a&gt; to manage your plugins, place the
following code in your .vimrc&lt;/p&gt;
&lt;pre class="code vim literal-block"&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.vim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Relative Numbering&lt;/span&gt;
Plug &lt;span class="s1"&gt;'myusuf3/numbers.vim'&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Put the rest of your plugins below...&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;
&amp;quot; Now, exclude the plugins you don't want numbers to deal with&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:numbers_exclude &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;'startify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'gundo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'vimshell'&lt;/span&gt;]
&lt;/pre&gt;
&lt;p&gt;This will give you a great editing experience. See below for a screencast:&lt;/p&gt;
&lt;img alt="numbers.vim screencast" class="align-center" src="https://softwarejourneyman.com/gif/numbers-vim.gif" /&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Numbers.vim provides a usable line-numbering solution with minimal required
configuration. I regret nothing about my bespoke journey, but I'm glad that
Numbers.vim is my destination.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Vim"></category><category term="Vim Plugins"></category></entry></feed>